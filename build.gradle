plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'dev.spiti.utilities'
version '1.0.1'

sourceCompatibility = 1.8

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

repositories {
    mavenCentral()
}

dependencies {
    compile ('org.yaml:snakeyaml:1.20')
    testCompile ('org.testng:testng:6.11',
            'org.hamcrest:hamcrest-all:1.3')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'config-reader'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Config Reader'
                description = 'A utility to read data from properties and yml files as HashMap<String, String>'
                url = 'https://github.com/spiti-dev/config-reader'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name  = 'Naresh Gourishetty'
                        email = 'naresh.g@spititech.com'
                    }
                    developer {
                        name = 'spiti.dev'
                        email = 'contact@spiti.dev'
                    }
                }
                scm {
                    url = 'https://github.com/spiti-dev/config-reader'
                    connection = 'scm:git:git://github.com/spiti-dev/config-reader.git'
                    developerConnection = 'scm:git:ssh://git@github.com:spiti-dev/config-reader.git'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}